							About Java
Java is a programming language.
Platform Independent − Unlike many other programming languages like C and C++, 
when Java is compiled, it is not compiled into platform specific machine instruction
rather into platform independent byte code. 
This byte code is interpreted by the Virtual Machine (JVM) ,on whichever platform it is being run on.
Java is used to develop mobile apps, web apps, desktop apps, games and much more.
Java works on different platforms (Windows, Mac, Linux,etc)
It is one of the most popular programming language in the world
It is open-source and free
It is secure, fast and powerful
It has a huge community support (tens of millions of developers)
Java is an object oriented language which gives a clear structure to programs and allows code to be reused,
lowering development costs

							Package
A package in Java is used to group related classes. 
Think of it as a folder in a file directory. We use packages to avoid name conflicts, and to write a better maintainable code. 

syntax:
package packagename;
package com
package com.rbs.ibanking.controller

							Class
About Class:
modifier class MyClass extends MySuperClass implements YourInterface {
    // field, constructor, and
    // method declarations
}

							Method:
modifier   returntype calculateAnswer(parameterlist){          
}
More generally, method declarations have six components, in order: 
Modifiers—such as public, private, and others you will learn about later.
The return type—the data type of the value returned by the method, or void if the method does not return a value.
The method name—the rules for field names apply to method names as well, but the convention is a little different.
The parameter list in parenthesis—a comma-delimited list of input parameters, preceded by their data types, enclosed by parentheses, (). If there are no parameters, you must use empty parentheses.
An exception list—to be discussed later.
The method body, enclosed between braces—the method's code, including the declaration of local variables, goes here.



							Java Variables
Variables are containers for storing data values.
Syntax
type variablename = value;
String name = "John";
int myNum = 15;


							Java Data Types
Data types are divided into two groups:
Primitive data types - includes byte, short, int, long, float, double, boolean and char
Non-primitive data types - such as String, Arrays and Classes Data Type	

Size	Description

Byte	→ 1 byte	Stores whole numbers from -128 to 127
Short	 → 2 bytes	Stores whole numbers from -32,768 to 32,767
Int	 → 4 bytes	Stores whole numbers from -2,147,483,648 to 2,147,483,647
Long -->	8 bytes	Stores whole numbers from -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807
float	-->4 bytes	Stores fractional numbers. Sufficient for storing 6 to 7 decimal digits
Double -->	8 bytes	Stores fractional numbers. Sufficient for storing 15 decimal digits
Boolean -->	1 bit	Stores true or false values
Char	→ 2 bytes	Stores a single character/letter or ASCII values

String -> alphanumeric character with in double quotes


							Java Constructors
A constructor in Java is a special method that is used to initialize objects. 
The constructor is called when an object of a class is created. 
It can be used to set initial values for object attributes:
Class name is constructor name


						Class to Class Communication 
By object
By class name

Variable:
Local variable
Instance variable
Static variable

1) Local Variable
A variable declared inside the body of the method is called local variable. You can use this variable only within that method and the other methods in the class aren't even aware that the variable exists.

A local variable cannot be defined with "static" keyword.

2) Instance Variable
A variable declared inside the class but outside the body of the method, is called instance variable. It is not declared as static.

It is called instance variable because its value is instance specific and is not shared among instances.

3) Static variable
A variable which is declared as static is called static variable. It cannot be local. 
You can create a single copy of static variable and share among all the instances of the class. 
Memory allocation for static variable happens only once when the class is loaded in the memory.


					Pass by address , value
By definition, pass by value means you are making a copy in memory of 
the actual parameter's value that is passed in, 
a copy of the contents of the actual parameter

In pass by reference (also called pass by address), 
a copy of the address of the actual parameter is stored.

					Return  in method
The return keyword finished the execution of a method, and can be used to return a value from a method.
Use the void keyword to specify that a method should not have a return value:

public class Main {
  static void myMethod() {
    System.out.println("I just got executed!");
}

  public static void main(String[] args) {
    myMethod();
  }
}



					String , String Buffer , String Builder
String is a sequence of characters. In java, objects of String are immutable which means a constant and cannot be changed once created.
Creating a String
There are two ways to create string in Java:
String literal
String s = “GeeksforGeeks”;
Using new keyword
String s = new String (“GeeksforGeeks”);

Java StringBuffer class is used to create mutable (modifiable) string. The StringBuffer class in java is same 
as String class except it is mutable i.e. it can be changed.
StringBuffer sb=new StringBuffer("Hello ");  
sb.append("Java");//now original string is changed  


Java StringBuilder class is used to create mutable (modifiable) string. The Java StringBuilder class is same as
 StringBuffer class except that it is non-synchronized. It is available since JDK 1.5.

StringBuilder sb=new StringBuilder("Hello ");  
sb.append("Java");//now original string is changed  
System.out.println(sb);//prints Hello Java  


								OOPS
Polymorphism
Inheritance
Encapsulation
Abstraction

What Is an Object?
An object is a software bundle of related state and behavior. Software objects are often used to model the real-world 
objects that you find in everyday life. This lesson explains how state and behavior are represented within an object, 
introduces the concept of data encapsulation, and explains the benefits of designing your software in this manner.

What Is a Class?
A class is a blueprint or prototype from which objects are created. This section defines a class that models the state 
and behavior of a real-world object.
It intentionally focuses on the basics, showing how even a simple class can cleanly model state and behavior.

What Is Inheritance?
Inheritance
The process by which one class acquires the properties and functionalities of another class is called inheritance. 
Inheritance provides the idea of reusability of code and each sub class defines only those features that are unique to it, 
rest of the features can be inherited from the parent class.



What Is an Interface?
An interface is a contract between a class and the outside world. When a class implements an interface,
it promises to provide the behavior published by that interface. 
This section defines a simple interface and explains the necessary changes for any class that implements it.


Abstraction:
Abstraction is a process where you show only “relevant” data and “hide” unnecessary details of an object from the user. 
For example, when you login to your bank account online, you enter your user_id and password and press login, 
what happens when you press login, 
how the input data sent to server, how it gets verified is all abstracted away from the you

Encapsulation
https://docs.oracle.com/en/database/oracle/oracle-database/12.2/jjdev/Java-overview.html#GUID-C1756D87-6CAD-4C87-A498-E7C996077D9A
Encapsulation describes the ability of an object to hide its data and methods from the rest of the world and is one 
of the fundamental principles of object-oriented programming. In Java, a class encapsulates the fields, which hold the state of 
an object, and the methods, which define the actions of the object. Encapsulation enables you to write reusable programs.
 It also enables you to restrict access only to those features of an object that are declared public. All other fields and methods 
are private and can be used for internal object processing.


public protected default private


Polymorphism is a object oriented programming feature that allows us to perform a single action in different ways. 
For example, lets say we have a class Animal that has a method animalSound(), here we cannot give implementation to this 
method as we do not know which Animal class would extend Animal class. So, we make this method abstract like this:

public abstract class Animal{
   public abstract void animalSound();
}


							Exception Handling
The Exception Handling in Java is one of the powerful mechanism to handle the runtime errors so that the normal flow 
of the application can be maintained.

Types of Java Exceptions
There are mainly two types of exceptions: checked and unchecked. An error is considered as the unchecked exception. 
However, according to Oracle, there are three types of exceptions namely:

Checked Exception
Unchecked Exception
Error

Key words - try,catch,finally,throw,throws 
checked exception - > if any exception class extends Other than RuntimeException or sub class of RuntimeException 
unchecked exception- > if any exception class extends Exception or sub class of Exception expect RuntimeException or sub class of RuntimeException 
Custom Exception - create our own exception class
nested exception
multiple catch



try	The "try" keyword is used to specify a block where we should place an exception code. It means we can't use try 
block alone. The try block must be followed by either catch or finally.
catch	The "catch" block is used to handle the exception. It must be preceded by try block which means we 
can't use catch block alone. It can be followed by finally block later.
finally	The "finally" block is used to execute the necessary code of the program. It is executed whether an exception is 
handled or not.
throw	The "throw" keyword is used to throw an exception.
throws	The "throws" keyword is used to declare exceptions. It specifies that there may occur an exception in the method. 
    It doesn't throw an exception. It is always used with method signature.



Example:
public class JavaExceptionExample{  
  public static void main(String args[]){  
   try{  
      //code that may raise exception  
      int data=100/0;  
   }catch(ArithmeticException e){System.out.println(e);}  
   //rest code of the program   
   System.out.println("rest of the code...");  
  }  
}  

package expectionexp;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class ThrowsAndThrowsExample {

	void registerStudent(String stuName, int age) throws Exception{

		try {
			System.out.println("Student name is ... : " + stuName);

			List<String> stuList = new ArrayList<String>();
			List<String> urstu = new ArrayList<String>();

			if (age > 18) {

				// generate student id
				// save to database
				// System.out.println("register Student successfully");

			} else {
				System.out.println("Age invalid , Abort ");
				throw new InvalidAgeException();
			}

			// sens email
			System.out.println("Email sent successfully");
			// send sms
			System.out.println("SMS sent successfully");

		} catch (InvalidAgeException e) {
			//e.printStackTrace();
		throw e;
		} finally {
			System.out.println(" finally executed successfully...");
		}

	}

}

/*
 * 
 * 
 * for(String sn:stuList) {
 * 
 * try { if (age > 3) {
 * 
 * } else { System.out.println("Age invalid , Abort "); throw new Exception(); }
 * //sendemail System.out.println("nsf"); }catch(Exception e) {
 * 
 * }
 * 
 * }
 */


								Thread
Refer - https://www.javatpoint.com/creating-thread
A thread is a thread of execution in a program. The Java Virtual Machine allows an application to have multiple threads 
of execution running concurrently. ... When a Java Virtual Machine starts up, there is usually a single non-daemon thread 
(which typically calls the method named main of some designated class).

Advantages of thread
1.Asynchronous programming
2.Multitasking - Splitting a task into multiple task to utilize multiprocessing functionality

windows operating system is multitasking , multiprocessing

Multithreading 
Multithreading in Java is a process of executing multiple threads simultaneously.

Thread Scheduler in Java
A component of Java that decides which thread to run.

Life cycle of a Thread (Thread States)
In Java, a thread always exists in any one of the following states. These states are:

New
Active - runnable
Running
Blocked / Waiting
Terminated



How to create thread
There are two ways to create a thread:

By extending Thread class
By implementing Runnable interface.

class Multi extends Thread{  
public void run(){  
System.out.println("thread is running...");  
}  
public static void main(String args[]){  
Multi t1=new Multi();  
t1.start();  
 }  
}  

2) Java Thread Example by implementing Runnable interface
class Multi3 implements Runnable{  
public void run(){  
System.out.println("thread is running...");  
}  
  
public static void main(String args[]){  
Multi3 m1=new Multi3();  
Thread t1 =new Thread(m1);  
t1.start();  
 }  
} 


sleep 

								File I/O
Java I/O (Input and Output) is used to process the input and produce the output.
Java uses the concept of a stream to make I/O operation fast. The java.io package contains all the classes required for
 input and output operations.
We can perform file handling in Java by Java I/O API.
import java.io.FileOutputStream;  
public class FileOutputStreamExample {  
    public static void main(String args[]){    
           try{    
             FileOutputStream fout=new FileOutputStream("D:\\testout.txt");    
             String s="Welcome to javaTpoint.";    
             byte b[]=s.getBytes();//converting string into byte array    
             fout.write(b);    
             fout.close();    
             System.out.println("success...");    
            }catch(Exception e){System.out.println(e);}    
      }    
} 

package fileexp;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Optional;
import java.util.Scanner;
import java.util.stream.Stream;

public class SearchingAwordinFile {
	
	
	private static void searchStringFromFile() {
		 Path path = FileSystems.getDefault()
		  .getPath("", "f:\\c.txt");
		 String searchTerm = "credit";

		 try(Stream <String> streamOfLines = Files.lines(path)) {
		  Optional <String> line = streamOfLines.filter(l -> 
		                           l.contains(searchTerm)) .findFirst();
		  if(line.isPresent()){
		   System.out.println(line.get());
		  }else
		   System.out.println("Not found");
		 }catch(Exception e) {
			 e.printStackTrace();
		 }
		}

	public static void main(String[] args) {
		FileReader myWriter = null;
		
		searchStringFromFile();

		try {
			Scanner txtscan = new Scanner(new File("f:\\c.txt"));

			while(txtscan.hasNextLine()){
			    String str = txtscan.nextLine();
			    if(str.indexOf("500") != -1){
			        System.out.println("EXISTS");
			        System.out.println(str.indexOf("credit"));
			       // break;
			    }else {
			        System.out.println("searching word not exist.......");

			    }
			}

		} catch (FileNotFoundException f) {
			System.out.println("Wrong file name...");
		} catch (IOException e) {
			e.printStackTrace();
		} finally {

			if (myWriter != null) {
				try {
					myWriter.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}

	}

}



								Collection
The Collection in Java is a framework that provides an architecture to store and manipulate the group of objects.
Java Collections can achieve all the operations that you perform on a data such as searching, sorting, insertion, manipulation, and deletion.
Java Collection means a single unit of objects. Java Collection framework provides many interfaces 
(Set, List, Queue, Deque) and classes (ArrayList, Vector, LinkedList, PriorityQueue, HashSet, LinkedHashSet, TreeSet).
What is a framework in Java
It provides readymade architecture.
It represents a set of classes and interfaces.
It is optional.
The Collection framework represents a unified architecture for storing and manipulating a group of objects. It has:
Interfaces and its implementations, i.e., classes
Algorithm



import java.util.*;    
class TestArrayList21{    
 public static void main(String args[]){    
     
  List<String> al=new ArrayList<String>();//creating arraylist    
  al.add("Sonoo");//adding object in arraylist    
  al.add("Michael");    
  al.add("James");    
  al.add("Andy");    
  //traversing elements using Iterator  
  Iterator itr=al.iterator();  
  while(itr.hasNext()){  
   System.out.println(itr.next());  
  }    
 }    
}    
ArrayList class
LinkedList class
List interface
HashSet class
LinkedHashSet class
TreeSet class
PriorityQueue class
Map interface
HashMap class
LinkedHashMap class
TreeMap class
Hashtable class
Sorting
Comparable interface
Comparator interface
Properties class in Java




Java Database Connectivity:

use this url - https://www.javatpoint.com/java-jdbc

JDBC stands for Java Database Connectivity. JDBC is a Java API to connect and execute the query with the database. 

JDBC Driver is a software component that enables java application to interact with the database. 

There are four types of JDBC drivers:
JDBC-ODBC Bridge Driver,
Native Driver,
Network Protocol Driver, and
Thin Driver

Thin driver
The thin driver converts JDBC calls directly into the vendor-specific database protocol.
That is why it is known as thin driver. It is fully written in Java language.

Statement interface
The Statement interface provides methods to execute queries with the database. 
The statement interface is a factory of ResultSet 
i.e. it provides factory method to get the object of ResultSet.

Commonly used methods of Statement interface:
The important methods of Statement interface are as follows:

1) public ResultSet executeQuery(String sql): is used to execute SELECT query. It returns the object of ResultSet.
2) public int executeUpdate(String sql): is used to execute specified query, it may be create, drop, insert, update, delete etc.
3) public boolean execute(String sql): is used to execute queries that may return multiple results.
4) public int[] executeBatch(): is used to execute batch of commands.



To connect Java application with the MySQL database, we need to follow 5 following steps.
In this example we are using MySql as the database. So we need to know following informations for the mysql database:

Driver class: The driver class for the mysql database is com.mysql.jdbc.Driver.
Connection URL: The connection URL for the mysql database is jdbc:mysql://localhost:3306/sonoo where jdbc is the API, mysql is the database, localhost is the server name on which mysql is running, we may also use IP address, 3306 is the port number and sonoo is the database name. We may use any database, in such case, we need to replace the sonoo with our database name.
Username: The default username for the mysql database is root.
Password: It is the password given by the user at the time of installing the mysql database. In this example, we are going to use root as the password.

import java.sql.*;  
class MysqlCon{  
public static void main(String args[]){  
try{  
Class.forName("com.mysql.jdbc.Driver");  
Connection con=DriverManager.getConnection(  
"jdbc:mysql://localhost:3306/sonoo","root","root");  
//here sonoo is database name, root is username and password  
Statement stmt=con.createStatement();  
ResultSet rs=stmt.executeQuery("select * from emp");  
while(rs.next())  
System.out.println(rs.getInt(1)+"  "+rs.getString(2)+"  "+rs.getString(3));  
con.close();  
}catch(Exception e){ System.out.println(e);}  
}  
}  



The statement interface is used to create SQL basic statements in Java it provides methods to execute queries with the database.
There are different types of statements that are used in JDBC as follows:

Statement
Prepared Statement
Callable Statement

1.  Create a Statement: From the connection interface, you can create the object for this interface.
 It is generally used for general–purpose access to databases and is useful while using static SQL statements at runtime.

Syntax:

Statement statement = connection.createStatement();
Implementation: Once the Statement object is created, there are three ways to execute it.

boolean execute(String SQL): If the ResultSet object is retrieved, then it returns true else false is returned. 
Is used to execute SQL DDL statements or for dynamic SQL.

int executeUpdate(String SQL): Returns number of rows that are affected by the execution of the statement, 
used when you need a number for INSERT, DELETE or UPDATE statements.

ResultSet executeQuery(String SQL): Returns a ResultSet object. Used similarly as SELECT is used in SQL.


PreparedStatement interface
The PreparedStatement interface is a subinterface of Statement. It is used to execute parameterized query.
Let's see the example of parameterized query:
String sql="insert into emp values(?,?,?)"; 
PreparedStatement stmt=con.prepareStatement("insert into company values(?,?)");  
stmt.setInt(1,101);//1 specifies the first parameter in the query  
stmt.setString(2,"Ratan");  
int i=stmt.executeUpdate(); 


create or replace procedure employee
(id IN NUMBER,  
name IN VARCHAR2)  
is  
begin  
insert into emp_det values(id,name);  
end;  

Java CallableStatement Interface
CallableStatement interface is used to call the stored procedures and functions.
CallableStatement stmt=con.prepareCall("{call salary_processing(?,?)}");  
stmt.setInt(1,1011);  
stmt.setString(2,"dec");  
stmt.execute();  



Transaction Management in JDBC
Transaction represents a single unit of work.
The ACID properties describes the transaction management well. ACID stands for Atomicity, Consistency, isolation and durability.
Atomicity means either all successful or none.
Consistency ensures bringing the database from one consistent state to another consistent state.
Isolation ensures that transaction is isolated from other transaction.
Durability means once a transaction has been committed, it will remain so, even in the event of errors, power loss etc.

void setAutoCommit(boolean status)	It is true bydefault means each transaction is committed bydefault.
void commit()	commits the transaction.
void rollback()	cancels the transaction.

import java.sql.*;  
class EmployeeDao{  
public static void main(String args[])throws Exception{  
Class.forName("oracle.jdbc.driver.OracleDriver");  
Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe","system","oracle");  
con.setAutoCommit(false);  
  
Statement stmt=con.createStatement();  
stmt.executeUpdate("insert into emp_det values(190,'priya',40000)");  
stmt.executeUpdate("insert into emp_det values(191,'rajesh',50000)");  
  
con.commit();  
con.close();  
}}  


Batch Processing in JDBC
Instead of executing a single query, we can execute a batch (group) of queries. It makes the performance fast.
The java.sql.Statement and java.sql.PreparedStatement interfaces provide methods for batch processing.

void addBatch(String query)	It adds query into batch.
int[] executeBatch()	It executes the batch of queries.

package jdbcexp;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public class JdbcSimpleExample {

	public static void main(String[] args) {

		ResultSet rs = null;
		Statement stmt = null;
		Connection con = null;

		try {

			Class.forName("com.mysql.cj.jdbc.Driver");
			con = DriverManager.getConnection("jdbc:mysql://localhost:3306/iqdb", "root", "password");
			// here sonoo is database name, root is username and password
			stmt = con.createStatement();
			rs = stmt.executeQuery("select * from emp");
			while (rs.next())
				System.out.println(rs.getString(1) + "  " + rs.getString(2) + "  " + rs.getInt(3));
		} catch (ClassNotFoundException e) {
			// send mail
			System.out.println("no driver found...");
		} catch (SQLException e) {
			// send mail
			e.printStackTrace();
		} finally {
			try {

				if (rs != null) {
					rs.close();
				}

				if (stmt != null) {
					stmt.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {

			}

		}

	}

}



Storing File

CREATE TABLE  "FILETABLE"   
   (    "ID" NUMBER,   
    "NAME" CLOB  
   )  
/  


Java Example to store file in database
import java.io.*;  
import java.sql.*;  
  
public class StoreFile {  
public static void main(String[] args) {  
try{  
Class.forName("oracle.jdbc.driver.OracleDriver");  
Connection con=DriverManager.getConnection(  
"jdbc:oracle:thin:@localhost:1521:xe","system","oracle");  
              
PreparedStatement ps=con.prepareStatement(  
"insert into filetable values(?,?)");  
              
File f=new File("d:\\myfile.txt");  
FileReader fr=new FileReader(f);  
              
ps.setInt(1,101);  
ps.setCharacterStream(2,fr,(int)f.length());  
int i=ps.executeUpdate();  
System.out.println(i+" records affected");  
              
con.close();  
              
}catch (Exception e) {e.printStackTrace();}  
}  
}  

